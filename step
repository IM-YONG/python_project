<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>진행 상태</title>
  <style>
      body {
        font-family: "Spoqa Han Sans Neo", Arial, sans-serif;
        line-height: 1.17;
        letter-spacing: 0;
        background: #f9f9f9;
        padding: 1px;
      }
      .progress-wrapper {
        position: relative;
        background: #fff;
        padding: 10px 1px 10px 1px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid #d4d6df;
        background: #f5f7ff;
        min-width: 1200px;
        overflow: auto;
        z-index: 1;
      }
      .progress-wrapper::before {
        content: "";
        display: block;
        position: absolute;
        top: 1px;
        left: 1px;
        width: calc(100% - 1px);
        height: calc(100% - 1px);
        border-radius: 8px;
        background: #fff;
        z-index: -1;
      }
      .progress-wrapper .progress-container {
        display: flex;
        justify-content: space-between;
      }
      .progress-wrapper .progress-container .step {
        text-align: center;
        flex: 1;
        position: relative;
      }
      /* 기본 회색 라인 */
      .progress-wrapper .progress-container .step:not(:last-child)::after {
        content: "";
        position: absolute;
        top: 34px;
        right: -50%;
        width: 100%;
        height: 4px;
        background: #c7c7c7;
        z-index: 0;
      }
      /* 전체 completed는 파란색 */
      .progress-wrapper .progress-container .step.completed:not(:last-child)::after {
        background: #437dea;
      }
      /* .step.completed.gradient : 진행된 단계의 연결선-그라데이션 */
      .progress-wrapper .progress-container .step.completed.gradient:not(:last-child)::after {
        background: linear-gradient(to right, #437dea, #10ce9a);
      }
      @keyframes pulse {
        0% {
          box-shadow: 0 0 0 0 rgba(16, 206, 154, 0.5);
        }
        70% {
          box-shadow: 0 0 0 10px rgba(16, 206, 154, 0);
        }
        100% {
          box-shadow: 0 0 0 0 rgba(16, 206, 154, 0);
        }
      }

      .progress-wrapper .progress-container .step.active .circle {
        border-color: #10ce9a;
        animation: pulse 1.5s infinite;
      }
      .progress-wrapper .progress-container .circle {
        width: 13px;
        height: 13px;
        border-radius: 50%;
        border: 4px solid #c7c7c7;
        background: #fff;
        margin: 0 auto;
        position: relative;
        z-index: 1;
      }
      /*  .step.completed : 완료된 단계에 부여 */
      .progress-wrapper .progress-container .step.completed .circle {
        border-color: #f7fbff;
        background-color: #437dea;
        box-shadow: 0 0 5px rgba(13, 36, 78, 0.3);
      }
       /*  .step.active : 현재 진행 중인 단계 */
      .progress-wrapper .progress-container .step.active .circle {
        background: #10ce9a;
        border-color: #eafff9;
        position: relative;
      }
      .progress-wrapper .progress-container .step.active .circle::after {
        content: "";
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 1px solid #89f3d6;
        border-radius: 50%;
        z-index: -1;
      }
      .progress-wrapper .progress-container .label {
        margin-top: 9px;
        font-size: 14px;
        color: #7b7b7b;
        padding: 3px;
      }
      .progress-wrapper .progress-container .role {
        font-weight: bold;
        font-size: 15px;
        margin-bottom: 7px;
        color: #7b7b7b;
      }
      .progress-wrapper .progress-container .step.completed .label,
      .progress-wrapper .progress-container .step.active .label,
      .progress-wrapper .progress-container .step.completed .role {
        color: #3e66b1;
      }
      .progress-wrapper .progress-container .step.active .role {
        color: #10ce9a;
      }
      .progress-wrapper .progress-container .step.active .label {
        color: #fff;
        background-color: #05c792;
        display: inline-block;
        padding: 4px 12px;
        border-radius: 7px;
      }
      .progress-wrapper .step-note-row {
        display: grid;
        grid-template-columns: repeat(13, 1fr);
        margin-top: 5px;
        text-align: center;
      }
      .progress-wrapper .step-note {
        font-size: 14px;
        color: #656565;
      }
  </style>
</head>
<body>
  <div class="progress-wrapper">
    <div class="progress-container" id="progress-container"></div>
      <div class="step-note-row">
        <div class="step-note" id="step-note" style="grid-column: 10 / span 2">
        </div>
      </div>
  </div>
  <script>
	function fn_stepValueSet(args) {
     	// status : completed, gradient, active, pending
     	// step별 상태 초기화
    	const stepData = [
      		{ role: 'PL', label: '과제 제안', status: 'pending' },
      		{ role: 'PMO', label: '제안심의', status: 'pending' },
      		{ role: '팀장', label: '제안심의', status: 'pending' },
      		{ role: 'PMO', label: '중점/단위 설정', status: 'pending' },
      		{ role: 'PL', label: '위탁 심의', status: 'pending' },
      		{ role: 'PL', label: '과제 결재', status: 'pending' },
      		{ role: 'PL', label: '과제 생성', status: 'pending' },
      		{ role: 'PMO', label: 'Gate 설정', status: 'pending' },
      		{ role: '팀장', label: 'Gate 설정', status: 'pending' },
      		{ role: 'PL', label: '과제 수행', status: 'pending' },
      		{ role: 'PMO', label: 'Gate 점검', status: 'pending' },
      		{ role: '팀장', label: 'Gate 점검', status: 'pending' },
      		{ role: 'PL', label: '과제 완료', status: 'pending' },
    	];
    
    	var stepDepth = args.STEP_DEPTH;
    	if(args.PROG_STAT == 'E') stepDepth = 13;
		for(var i = 0; i < stepDepth; i++) {
      		stepData[i].status = 'completed';
      		if(i == (stepDepth - 2)) stepData[i].status = 'gradient';
      		if(i == (stepDepth - 1)) stepData[i].status = 'active';
    	}
		
		if(args.PROG_STAT == 'E' && stepDepth == 13) {
			stepData[11].status = 'completed';
			stepData[12].status = 'completed';
		}

		if(args.DEPTH_GP_NM) {
			document.getElementById("step-note").textContent = '( ' + args.DEPTH_GP_NM + ' )';
		} else {
			document.getElementById("step-note").textContent = "\u00A0";
		}	
		
		fn_renderProgress(stepData);
	}
   
	function fn_renderProgress(stepData) {
		const container = document.getElementById('progress-container');
      	container.innerHTML = '';

      	stepData.forEach((step, idx) => {
        	const div = document.createElement('div');
        	div.className = 'step';

        	if (step.status === 'completed') div.classList.add('completed');
        	if (step.status === 'active') div.classList.add('active');
        	if (step.status === 'gradient') div.classList.add('completed', 'gradient');

        	const circle = document.createElement('div');
        	circle.className = 'circle';

        	const role = document.createElement('div');
        	role.className = 'role';
        	role.textContent = step.role;

        	const label = document.createElement('div');
        	label.className = 'label';
        	label.textContent = step.label;

        	div.appendChild(role);
        	div.appendChild(circle);
        	div.appendChild(label);

        	container.appendChild(div);
		});
	}
  </script>
</body>
</html>
